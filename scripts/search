#!/bin/bash
# Function to display usage
show_help() {
  echo "Usage: cheese search"
  echo "Searching a file of molecules with CHEESE"
  echo "Options:"
  echo "  --input_file       Input file in the following formats : .csv , .txt , .smi"
  echo "  --smiles_col       Smiles column in the CSV file (Default SMILES)"
  echo "  --output_file      Destination file of search results"
  echo "  --search_type    Search type : 'morgan', 'espsim_shape','espsim_electrostatic', 'active_pairs','consensus' (Default : 'morgan')"
  echo "  --n_neighbors    Number of neighbors"  
  echo "  --search_quality    Speed/Accuracy Tradeoff : 'fast', 'accurate', 'very_accurate'" 
  echo "  --db_names    Names of the databases to search joined by ',' (Default 'ZINC15,ENAMINE-REAL')"  
  echo "  --port             CHEESE Server port on which to run the computation"
  echo "  -h, --help       Show this help message"
  exit 1
}


# Check if no arguments are passed
if [ $# -eq 0 ]; then
    # Show help if no arguments
    show_help
    exit 0
fi

all_args=$@

convert_to_absolute_path() {
    local input_path="$1"

    # Check if the path is already absolute
    if [[ "$input_path" == /* ]]; then
        # It's already absolute, just return it
        echo "$input_path"
    else
        # It's a relative path, convert it to absolute
        echo "$(pwd)/$input_path"
    fi
}

# Automatically choosing port on which to start cheese 
port=""

get_port(){

local container_name="$1"
docker inspect -f '{{range .NetworkSettings.Ports}}{{range .}}{{if eq .HostIp "0.0.0.0"}}{{.HostPort}}{{end}}{{end}}{{end}}' $container_name

}

check_cheese_server(){
# Get all containers with a name containing "cheese_api"
local container_substring="${USER}_cheese_api"
containers=$(docker ps -a --format '{{.Names}}' | grep "$container_substring")
# Check if we have any containers with that name
if [[ -n "$containers" ]]; then
  # Pick a random container from the list
  random_container=$(echo "$containers" | shuf -n 1)
  port=$(get_port $random_container)
else
  echo "No CHEESE Server is running. Please run cheese start-server !!"
  exit 1
fi
}


# Default values
visualisation_method="pca"
smiles_col="SMILES"
output_file="${PWD}/search_results.csv"
search_type="morgan"
search_quality="fast"
n_neighbors="30"
db_names="ZINC15,ENAMINE-REAL"

check_cheese_server

set -e


# Parse command-line arguments manually
while [[ $# -gt 0 ]]; do
  case "$1" in
    --input_file)
      input_file=$(convert_to_absolute_path $2)
      
      # Check if inout file exists
      if [ ! -e "$input_file" ]; then
      echo "$input_file does not exist !!"
      exit 1
      fi
      
      shift 2
      ;;
    --smiles_col)
      smiles_col=$2
      shift 2
      ;;
    --output_file)
      output_file=$(convert_to_absolute_path $2)
      shift 2
      ;;
    --search_type)
      search_type=$2
      shift 2
      ;;
    --search_quality)
      search_quality=$2

      if [ "$search_quality" = "very_accurate" ]; then
      search_quality='very%20accurate'
      fi

      shift 2
      ;;
    --n_neighbors)
      n_neighbors=$2
      shift 2
      ;;
    --db_names)
      db_names=$2
      shift 2
      ;;
    --port)
      port=$2
      shift 2
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo "Unknown option: $1"
      show_help
      ;;
  esac
done


REQUEST="http://$IP:$port/search_file?input_file=$input_file&smiles_col=$smiles_col&output_file=$output_file&n_neighbors=$n_neighbors&search_quality=$search_quality&search_type=$search_type&db_names=$db_names"

curl -GET $REQUEST
