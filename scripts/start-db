#!/bin/bash
set -e
DB_PORT=8001
random_uuid=$(uuidgen)
db_container="${USER}_cheese_db_${random_uuid}"

# Function to display usage
show_help() {
  echo "Usage: cheese start-db [options]"
  echo "Options:"
  echo "  --db_container   Specify db_container (Default : uuid_cheese_db)"
  echo "  --port      Specify database port (Optional)"
  echo "  -h, --help       Show this help message"
  exit 1
}


# Parse command-line arguments manually
while [[ $# -gt 0 ]]; do
  case "$1" in
    -p|--port)
      port="$2"
      DB_PORT=$port:8001
      shift 2
      ;;
    --db_container)
      db_container="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo "Unknown option: $1"
      show_help
      ;;
  esac
done



check_server(){
  local my_db_container=$1
  local my_db_port=$2
  
  url="http://$IP:$my_db_port/test"

  # Set the timeout duration (5 mins)
  timeout_duration=300

  # Start time for timeout check
  start_time=$(date +%s)


  # Loop until the curl command succeeds or timeout occurs
  while true; do
    # Try the curl command (replace with your actual curl command)
    curl -s --fail "$url" -o /dev/null && break

    db_container_state=$(docker container inspect -f '{{.State.Running}}' $my_db_container)
    
    if [ ! "$db_container_state" == "true" ]; then
    # If strings are equal
    echo "CHEESE database server is down !"
    exit 1
    fi

    # Check if the elapsed time exceeds the timeout duration
    current_time=$(date +%s)
    elapsed_time=$((current_time - start_time))

    if [ "$elapsed_time" -ge "$timeout_duration" ]; then
      echo "Timeout reached after $elapsed_time seconds."
      docker rm -f $my_db_container > /dev/null 2>&1
      exit 1
    fi
  done


}


IMAGE_NAME="themamaai.azurecr.io/cheese/cheese-database"

# echo Welcome to CHEESE Database !

CONFIG_FILE="${HOME}/.config/cheese/cheese-env-file.conf"

if [ "$TESTING" = "true" ] ; then
    CONFIG_FILE="${HOME}/.config/cheese/cheese-env-file-test.conf"
fi

FULL_IMAGE_NAME="${IMAGE_NAME}/${CHEESE_CUSTOMER}"

echo "Using config file : $CONFIG_FILE"
docker run -d -u $UID -v /:/data --env-file $CONFIG_FILE --name $db_container -p $DB_PORT --rm $FULL_IMAGE_NAME

# exposed_db_port=$(docker inspect $db_container | grep HostPort | sort | uniq | grep -o [0-9] | tr -d '\n')
exposed_db_port=$(docker inspect -f '{{range .NetworkSettings.Ports}}{{range .}}{{if eq .HostIp "0.0.0.0"}}{{.HostPort}}{{end}}{{end}}{{end}}' $db_container)
echo Starting CHEESE database server...
check_server $db_container $exposed_db_port

echo Connected to CHEESE database server !
echo "CHEESE database is available here : http://$IP:$exposed_db_port"
echo Container name : $db_container