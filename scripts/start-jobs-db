#!/bin/bash
set -e
DB_PORT=8001
JOBS_DB_PORT=8001
JOBS_FILE_SERVER_PORT=8000
random_uuid=$(uuidgen | cut -c1-8)
db_container="${USER}_cheese_db_${random_uuid}"
jobs_db_container="${USER}_cheese_jobs_app_${random_uuid}"
jobs_exec_container="${USER}_cheese_jobs_exec_${random_uuid}"
download_exec_container="${USER}_cheese_download_exec_${random_uuid}"
jobs_file_server_container="${USER}_cheese_jobs_file_server_${random_uuid}"

# Function to display usage
show_help() {
  echo "Usage: cheese start-jobs-db [options]"
  echo "Options:"
  echo "  --db_container   Specify db_container (Default : uuid_cheese_db)"
  echo "  --jobs_db_container   Specify jobs_db_container (Default : uuid_cheese_jobs_app)"
  echo "  --jobs_exec_container   Specify jobs_exec_container (Default : uuid_cheese_jobs_exec)"
  echo "  --download_exec_container   Specify download_exec_container (Default : uuid_cheese_download_exec)"
  echo "  --jobs_file_server_container   Specify jobs_file_server_container (Default : uuid_cheese_jobs_file_server)"
  echo "  --db_port      Specify database port (Optional)"
  echo "  --jobs_db_port      Specify jobs database port (Optional)"
  echo "  --jobs_file_server_port      Specify jobs file server port (Optional)"
  echo "  -h, --help       Show this help message"
  exit 1
}


# Parse command-line arguments manually
while [[ $# -gt 0 ]]; do
  case "$1" in
    --db_port)
      port="$2"
      DB_PORT=$port:8001
      shift 2
      ;;
    --jobs_db_port)
      port="$2"
      JOBS_DB_PORT=$port:8001
      shift 2
      ;;
    --jobs_file_server_port)
      port="$2"
      JOBS_FILE_SERVER_PORT=$port:8000
      shift 2
      ;;
    --db_container)
      db_container="$2"
      shift 2
      ;;
    --jobs_db_container)
      jobs_db_container="$2"
      shift 2
      ;;
    --jobs_exec_container)
      jobs_exec_container="$2"
      shift 2
      ;;
    --download_exec_container)
      download_exec_container="$2"
      shift 2
      ;;
    --jobs_file_server_container)
      jobs_file_server_container="$2"
      shift 2
      ;; 
    -h|--help)
      show_help
      ;;
    *)
      echo "Unknown option: $1"
      show_help
      ;;
  esac
done



check_server(){
  local my_db_container=$1
  local my_db_port=$2
  
  url="http://$IP:$my_db_port/test"

  # Set the timeout duration (5 mins)
  timeout_duration=300

  # Start time for timeout check
  start_time=$(date +%s)


  # Loop until the curl command succeeds or timeout occurs
  while true; do
    # Try the curl command (replace with your actual curl command)
    curl -s --fail "$url" -o /dev/null && break

    db_container_state=$(docker container inspect -f '{{.State.Running}}' $my_db_container)
    
    if [ ! "$db_container_state" == "true" ]; then
    # If strings are equal
    echo "CHEESE database server is down !"
    exit 1
    fi

    # Check if the elapsed time exceeds the timeout duration
    current_time=$(date +%s)
    elapsed_time=$((current_time - start_time))

    if [ "$elapsed_time" -ge "$timeout_duration" ]; then
      echo "Timeout reached after $elapsed_time seconds."
      docker rm -f $my_db_container > /dev/null 2>&1
      exit 1
    fi
  done


}


IMAGE_NAME="themamaai.azurecr.io/cheese/cheese-database"

# echo Welcome to CHEESE Database !

CONFIG_FILE="${HOME}/.config/cheese/cheese-env-file.conf"

if [ "$TESTING" = "true" ] ; then
    CONFIG_FILE="${HOME}/.config/cheese/cheese-env-file-test.conf"
fi

FULL_IMAGE_NAME="${IMAGE_NAME}/${CHEESE_CUSTOMER}"

JOBS_DATA_PATH="/tmp/cheese-jobs"

echo "Using config file : $CONFIG_FILE"
docker run --privileged -d -u $UID -v /:/data --network cheese-network --env-file $CONFIG_FILE --name $db_container -p $DB_PORT --rm $FULL_IMAGE_NAME

# Making the jobs folder
mkdir -p /tmp/cheese-jobs

# Start file server for accessing jobs results
docker run --privileged -d -u $UID -v /:/data --entrypoint bash --name $jobs_file_server_container -p $JOBS_FILE_SERVER_PORT $FULL_IMAGE_NAME -c "python3 -m http.server 8000 --directory /data/tmp/cheese-jobs"
exposed_jobs_file_server_port=$(docker inspect -f '{{range .NetworkSettings.Ports}}{{range .}}{{if eq .HostIp "0.0.0.0"}}{{.HostPort}}{{end}}{{end}}{{end}}' $jobs_file_server_container)

JOBS_FILE_SERVER_URL="http://$IP:$exposed_jobs_file_server_port/"

docker run --privileged -d -u $UID -v /:/data --network cheese-network --entrypoint bash --env-file $CONFIG_FILE --env JOBS_DATA_PATH=$JOBS_DATA_PATH --name $db_container -p $JOBS_DB_PORT --name $jobs_db_container $FULL_IMAGE_NAME -c "python -um cheese_database.jobs_app"
docker run --privileged -d -u $UID -v /:/data --entrypoint python --env-file $CONFIG_FILE --env JOBS_DATA_PATH="/tmp/cheese-jobs" --name $jobs_exec_container $FULL_IMAGE_NAME -c "from cheese_database.jobs_executor import main; main()"
docker run --privileged -d -u $UID -v /:/data --entrypoint python --env-file $CONFIG_FILE --env JOBS_DATA_PATH="/tmp/cheese-jobs" --env JOBS_FILE_SERVER_URL=$JOBS_FILE_SERVER_URL --name $download_exec_container $FULL_IMAGE_NAME -c "from cheese_database.download_executor import main; main()"


# exposed_db_port=$(docker inspect $db_container | grep HostPort | sort | uniq | grep -o [0-9] | tr -d '\n')
exposed_db_port=$(docker inspect -f '{{range .NetworkSettings.Ports}}{{range .}}{{if eq .HostIp "0.0.0.0"}}{{.HostPort}}{{end}}{{end}}{{end}}' $db_container)
exposed_jobs_db_port=$(docker inspect -f '{{range .NetworkSettings.Ports}}{{range .}}{{if eq .HostIp "0.0.0.0"}}{{.HostPort}}{{end}}{{end}}{{end}}' $jobs_db_container)
echo Starting CHEESE database server...
check_server $db_container $exposed_db_port

echo Connected to CHEESE database server !
echo "Database server is available here : http://$IP:$exposed_db_port"
echo "Jobs app server is available here : http://$IP:$exposed_jobs_db_port"
echo "Jobs file server is available here : http://$IP:$exposed_jobs_file_server_port"
echo Container names : $db_container $jobs_db_container